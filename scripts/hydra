#!/usr/bin/env bash
function ensure_permissions_on_files_and_directories(){
  chmod -R a+rwx $INFRA_PATH 2>/dev/null
  chmod -R a+rwx $SCRIPTS_PATH 2>/dev/null
  chmod -R a+rwx $SOURCE_PATH 2>/dev/null
}

function build_paths() {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  cd ../
  export ROOT_PATH=$(pwd)
  cd scripts/
  export SCRIPTS_PATH=$(pwd)
  cd ../infra
  export INFRA_PATH=$(pwd)
  cd ../source
  export SOURCE_PATH=$(pwd)
  cd ..
}

function load_scripts() {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  source ./docker/operations.sh

  source ./hydra-operations/install.sh
  source ./hydra-operations/install-template.sh
  source ./hydra-operations/build.sh
  source ./hydra-operations/start.sh
  source ./hydra-operations/stop.sh
  source ./hydra-operations/destroy.sh
  source ./hydra-operations/purge.sh
  source ./hydra-operations/status.sh
  source ./hydra-operations/remote-deploy.sh
  source ./hydra-operations/remote-start.sh
  source ./hydra-operations/remote-status.sh
  source ./hydra-operations/logs.sh

  source ./template/custom-template.sh

  source ./utils/echo-colors.sh
  source ./utils/get-information.sh
  source ./utils/validations.sh

  source ./migrations/migrations.sh

  cd ../
  get_env_variables_from_json_config_file
}

# @cmd Installs a local framework and detaches project
function install() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  install_project

  exit 0
}

# @cmd Installs a project from templates
# @arg name        Project name
# @option --repo   Project repositor (default https://github.com/Constellation-Labs/metagraph-examples.git)
# @option --path   Template path on repository (default examples)
# @flag   --list   List available templates
function install-template() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  if [ -z "${argc_repo}" ]; then
    argc_repo="https://github.com/Constellation-Labs/metagraph-examples.git"
  fi

  if [ -z "${argc_path}" ]; then
    argc_path="examples"
  fi

  install_template

  exit 0
}

# @cmd Build containers
# @flag   --no_cache                      Build docker containers with no cache
# @flag   --run                           Run containers after build
function build() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  build_containers

  exit 0
}

# @cmd Start containers from the genesis snapshot (erasing history)
# @alias start_genesis
function start-genesis() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  start_containers true

  exit 0
}

# @cmd Start containers from the last snapshot (maintaining history)
# @alias start_rollback
function start-rollback() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  start_containers false

  exit 0
}

# @cmd Stop containers
function stop() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""
  set_docker_compose
  check_if_docker_is_running

  stop_containers

  exit 0
}

# @cmd Destroy containers
# @flag   --delete_project            Delete custom project
function destroy() {
  check_if_should_run_update

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  destroy_containers

  exit 0
}

# @cmd Destroy containers and images
# @flag   --delete_project            Delete custom project
function purge() {
  check_if_should_run_update

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  purge_containers

  exit 0
}

# @cmd Check the status of the containers
function status() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  status_containers

  exit 0
}

# @cmd Remotely deploy to cloud instances using Ansible
# @alias remote_deploy
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/remote/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_DEPLOY_PLAYBOOK_FILE: infra/ansible/remote/playbooks/deploy.ansible.yml
# @flag   --force_genesis                      Force metagraph to deploy as genesis
function remote-deploy() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  remote_deploy_metagraph

  exit 0
}

# @cmd Remotely start the metagraph on cloud instances using Ansible
# @alias remote_start
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/remote/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_START_PLAYBOOK_FILE: infra/ansible/remote/playbooks/start/start.ansible.yml
# @flag   --force_genesis                      Force metagraph to run as genesis
function remote-start() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  remote_start_metagraph

  exit 0
}

# @cmd Check the status of the remote nodes
function remote-status() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  remote_status

  exit 0
}
# @cmd Update Euclid
# @option --version!  The Euclid version (https://github.com/Constellation-Labs/euclid-development-environment/releases)
function update() {
  build_paths
  ensure_permissions_on_files_and_directories
  if [ -d "$SCRIPTS_PATH/hydra-operations" ]; then
    load_scripts
  fi
  if command -v run_migrations &>/dev/null; then
    run_migrations $argc_version
  fi
  update_euclid

  exit 0
}

# @cmd Get the logs from containers
# @arg container_name!        Container name
# @arg layer!                 Layer name (global-l0, dag-l1, metagraph-l0, currency-l1, data-l1)
# @option -n                  Retroactive rows from logs file (default 10)
function logs() {
  check_if_should_run_update

  build_paths
  ensure_permissions_on_files_and_directories
  load_scripts

  logs_containers

  exit 0
}

# The functions below are made for backward compatibility, they will be moved to scripts/hydra-operations/update in the next releases
function check_if_should_run_update() {
  build_paths
  ensure_permissions_on_files_and_directories
  DIRECTORY="$SCRIPTS_PATH/hydra-operations"

  if [ ! -d "$DIRECTORY" ]; then
    echo "$(tput setaf 1) Updates have been migrated to hydra update. Please run hydra update before continuing"
    exit 1
  fi

  local euclid_version_field=$(jq -r '.version // empty' "$ROOT_PATH/euclid.json")
  if [ -z "$euclid_version_field" ]; then
    echo "$(tput setaf 3) Could not find the version field on euclid.json file, the file is probably outdated. Running migrations..."
    load_scripts
    run_migrations
  fi
}

function check_if_container_is_running() {
  if docker ps --format '{{.Names}}' | grep "$1"; then
    echo You should stop the container $1 before update
    exit 1
  fi
}

function checkout_version() {
  if [ ! -z "$(git ls-remote origin $1)" ]; then
    git pull &>/dev/null
    git checkout $1 &>/dev/null
    echo "Valid version"
  else
    echo "Invalid version"
    exit 1
  fi
}

function check_if_should_update() {
  echo "This operation will update the following files/directories:"
  echo "Directory - infra/docker"
  echo "Directory - scripts"
  echo "Directory - infra/ansible/local/playbooks/start"
  echo "Directory - infra/ansible/local/playbooks/stop"
  echo "File - infra/ansible/local/playbooks/vars.ansible.yml"
  echo "Directory - infra/ansible/remote/playbooks/deploy"
  echo "Directory - infra/ansible/remote/playbooks/start"
  echo "File - infra/ansible/remote/hosts.ansible.yml"

  default="N"
  echo "Do you want to proceed? (Y/N, default: $default): "
  read -r input

  if [ -z "$input" ]; then
    input="$default"
  fi

  input=$(echo "$input" | tr '[:lower:]' '[:upper:]')

  if [[ "$input" == "N" ]]; then
    exit 0
  fi

  if [[ "$input" != "N" && "$input" != "Y" ]]; then
    echo "Invalid input. Please enter 'Y' or 'N'."
    exit 0
  fi
}

function check_if_any_container_is_running() {
  echo "You should stop all containers before update"

  echo "Checking if any container is running ..."
  while IFS= read -r node; do
    name=$(jq -r '.name' <<<"$node")
    check_if_container_is_running $name
    echo
  done < <(jq -c '.[]' <<<"$NODES")

  check_if_container_is_running grafana
  check_if_container_is_running prometheus
}

function update_infra_docker() {
  cd $INFRA_PATH
  echo "Updating docker folder ..."
  chmod -R +x docker
  rm -r docker

  cp -r euclid-development-environment/infra/docker .
  echo "Updated"
}

function update_scripts() {
  echo "Updating scripts ..."
  cd $ROOT_PATH
  chmod -R +x scripts
  rm -r scripts

  cp -r infra/euclid-development-environment/scripts .
  echo "Updated"
}

function update_remote_ansible_files() {
  echo "Updating remote ansible files..."

  ANSIBLE_DIRECTORY="$INFRA_PATH/ansible/remote"
  chmod -R +x $ANSIBLE_DIRECTORY

  if [ -d "$ANSIBLE_DIRECTORY" ]; then
    rm -r $ANSIBLE_DIRECTORY/hosts.ansible.yml
    cp $INFRA_PATH/euclid-development-environment/infra/ansible/remote/hosts.ansible.yml $ANSIBLE_DIRECTORY

    rm -r $ANSIBLE_DIRECTORY/playbooks/deploy
    cp -r $INFRA_PATH/euclid-development-environment/infra/ansible/remote/playbooks/deploy $ANSIBLE_DIRECTORY/playbooks

    rm -r $ANSIBLE_DIRECTORY/playbooks/start
    cp -r $INFRA_PATH/euclid-development-environment/infra/ansible/remote/playbooks/start $ANSIBLE_DIRECTORY/playbooks

  else
    mkdir -p "$INFRA_PATH/ansible"
    cp -r $INFRA_PATH/euclid-development-environment/infra/ansible/remote "$INFRA_PATH/ansible"
  fi

  echo "Updated"
}

function update_local_ansible_files() {
  echo "Updating local ansible files..."

  ANSIBLE_DIRECTORY="$INFRA_PATH/ansible/local"
  chmod -R +x $ANSIBLE_DIRECTORY
  if [ -d "$ANSIBLE_DIRECTORY" ]; then
    rm -r $ANSIBLE_DIRECTORY/playbooks/vars.ansible.yml
    cp $INFRA_PATH/euclid-development-environment/infra/ansible/local/playbooks/vars.ansible.yml $ANSIBLE_DIRECTORY/playbooks

    rm -r $ANSIBLE_DIRECTORY/playbooks/start
    cp -r $INFRA_PATH/euclid-development-environment/infra/ansible/local/playbooks/start $ANSIBLE_DIRECTORY/playbooks

    rm -r $ANSIBLE_DIRECTORY/playbooks/stop
    cp -r $INFRA_PATH/euclid-development-environment/infra/ansible/local/playbooks/stop $ANSIBLE_DIRECTORY/playbooks

  else
    mkdir -p "$INFRA_PATH/ansible"
    cp -r $INFRA_PATH/euclid-development-environment/infra/ansible/local "$INFRA_PATH/ansible"
  fi

  echo "Updated"
}

function update_euclid() {
  check_if_should_update
  check_if_any_container_is_running

  cd $INFRA_PATH

  echo "Starting update ..."
  echo "Getting updated version"
  git clone --quiet https://github.com/Constellation-Labs/euclid-development-environment.git >/dev/null
  cd euclid-development-environment/
  checkout_version $argc_version

  update_infra_docker
  update_scripts
  update_remote_ansible_files
  update_local_ansible_files

  chmod -R +w $INFRA_PATH/euclid-development-environment
  rm -r $INFRA_PATH/euclid-development-environment
  echo "Updating process finished!"
}

eval "$(argc --argc-eval "$0" "$@")"
