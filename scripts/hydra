#!/usr/bin/env bash
function ensure_permissions_on_files_and_directories() {
  chmod -R a+rwx $INFRA_PATH 2>/dev/null
  chmod -R a+rwx $SCRIPTS_PATH 2>/dev/null
  chmod -R a+rwx $SOURCE_PATH 2>/dev/null
}

function build_paths() {
  local SCRIPT_PATH="${BASH_SOURCE[0]}"
  while [ -h "$SCRIPT_PATH" ]; do
    local DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" && pwd)"
    SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
    [[ $SCRIPT_PATH != /* ]] && SCRIPT_PATH="$DIR/$SCRIPT_PATH"
  done
  SCRIPT_PATH="$(cd -P "$(dirname "$SCRIPT_PATH")" && pwd)"

  cd "$SCRIPT_PATH"
  cd ..
  export ROOT_PATH=$(pwd)
  cd "scripts/"
  export SCRIPTS_PATH=$(pwd)
  cd "../infra"
  export INFRA_PATH=$(pwd)
  cd "../source"
  export SOURCE_PATH=$(pwd)
  cd ..
}

function load_scripts() {
  cd $SCRIPTS_PATH
  source ./docker/operations.sh

  source ./hydra-operations/install.sh
  source ./hydra-operations/install-template.sh
  source ./hydra-operations/build.sh
  source ./hydra-operations/start.sh
  source ./hydra-operations/stop.sh
  source ./hydra-operations/destroy.sh
  source ./hydra-operations/purge.sh
  source ./hydra-operations/status.sh
  source ./hydra-operations/remote-deploy.sh
  source ./hydra-operations/remote-start.sh
  source ./hydra-operations/remote-status.sh
  source ./hydra-operations/remote-logs.sh
  source ./hydra-operations/logs.sh
  source ./hydra-operations/install-monitoring-service.sh
  source ./hydra-operations/remote-deploy-monitoring-service.sh
  source ./hydra-operations/remote-start-monitoring-service.sh
  source ./hydra-operations/remote-snapshot-fee-config.sh
  source ./hydra-operations/update.sh

  source ./template/custom-template.sh

  source ./utils/echo-colors.sh
  source ./utils/get-information.sh
  source ./utils/validations.sh

  source ./migrations/migrations.sh

  cd ../
  get_env_variables_from_json_config_file
}

# @cmd Installs a local framework and detaches project
function install() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  install_project

  exit 0
}

# @cmd Installs a project from templates
# @arg name        Project name
# @option --repo   Project repositor (default https://github.com/Constellation-Labs/metagraph-examples.git)
# @option --path   Template path on repository (default examples)
# @flag   --list   List available templates
function install-template() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  if [ -z "${argc_repo}" ]; then
    argc_repo="https://github.com/Constellation-Labs/metagraph-examples.git"
  fi

  if [ -z "${argc_path}" ]; then
    argc_path="examples"
  fi

  install_template

  exit 0
}

# @cmd Build containers
# @flag   --no_cache                      Build docker containers with no cache
# @flag   --run                           Run containers after build
function build() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running
  check_git_ref_exists $TESSELLATION_VERSION

  build_containers

  exit 0
}

# @cmd Start containers from the genesis snapshot (erasing history)
# @alias start_genesis
function start-genesis() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  start_containers true

  exit 0
}

# @cmd Start containers from the last snapshot (maintaining history)
# @alias start_rollback
function start-rollback() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  start_containers false

  exit 0
}

# @cmd Stop containers
function stop() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""
  set_docker_compose
  check_if_docker_is_running

  stop_containers

  exit 0
}

# @cmd Destroy containers
# @flag   --delete_project            Delete custom project
function destroy() {
  build_paths
  check_if_should_run_update

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""

  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  destroy_containers

  exit 0
}

# @cmd Destroy containers and images
# @flag   --delete_project            Delete custom project
function purge() {
  build_paths
  check_if_should_run_update

  export FORCE_ROLLBACK=""
  export METAGRAPH_ID=""

  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  purge_containers

  exit 0
}

# @cmd Check the status of the containers
function status() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  set_docker_compose
  check_if_docker_is_running

  status_containers

  exit 0
}

# @cmd Remotely deploy to cloud instances using Ansible
# @alias remote_deploy
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/remote/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_NODES_DEPLOY_PLAYBOOK_FILE: infra/ansible/remote/nodes/playbooks/deploy.ansible.yml
# @flag   --force_genesis                Force metagraph to deploy as genesis
function remote-deploy() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  check_if_owner_and_staking_address_are_equal
  confirm_force_genesis

  check_metagraph_owner_fees_file_exists $SNAPSHOT_FEES_OWNER_FILE_NAME
  check_metagraph_staking_fees_file_exists $SNAPSHOT_FEES_STAKING_FILE_NAME

  remote_deploy_metagraph

  exit 0
}

# @cmd Remotely start the metagraph on cloud instances using Ansible
# @alias remote_start
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/remote/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_START_PLAYBOOK_FILE: infra/ansible/remote/nodes/playbooks/start/start.ansible.yml
# @flag   --force_genesis                Force metagraph to run as genesis
# @flag   --force_owner_message          Force to send owner message
# @flag   --force_staking_message        Force to send owner message
function remote-start() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts
  
  check_if_owner_and_staking_address_are_equal
  confirm_force_genesis

  check_metagraph_owner_fees_information $SNAPSHOT_FEES_OWNER_FILE_NAME $SNAPSHOT_FEES_OWNER_ALIAS $SNAPSHOT_FEES_OWNER_PASSWORD
  check_metagraph_staking_fees_information $SNAPSHOT_FEES_STAKING_FILE_NAME $SNAPSHOT_FEES_STAKING_ALIAS $SNAPSHOT_FEES_STAKING_PASSWORD

  remote_start_metagraph

  exit 0
}

# @cmd Check the status of the remote nodes
function remote-status() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  remote_status

  exit 0
}

# @cmd Get the logs from the remote hosts
# @arg host_name!             Host name (node-1, node-2, node-3, monitoring)
# @arg layer!                 Layer name (global-l0, dag-l1, metagraph-l0, currency-l1, data-l1, monitoring)
# @option -n                  Retroactive rows from logs file (default 10)
function remote-logs() {
  build_paths
  
  check_if_should_run_update
  ensure_permissions_on_files_and_directories
  load_scripts

  remote_logs

  exit 0
}

# @cmd Get the remote snapshot fee config
function remote-snapshot-fee-config() {
  build_paths
  
  check_if_should_run_update
  ensure_permissions_on_files_and_directories
  load_scripts

  remote_snapshot_fee_config

  exit 0
}

# @cmd Update Euclid
# @option --version!  The Euclid version (https://github.com/Constellation-Labs/euclid-development-environment/releases)
function update() {
  build_paths
  ensure_permissions_on_files_and_directories
  if [ -d "$SCRIPTS_PATH/hydra-operations" ]; then
    load_scripts
  fi

  update_euclid

  ensure_permissions_on_files_and_directories

  exit 0
}

# @cmd Get the logs from containers
# @arg container_name!        Container name
# @arg layer!                 Layer name (global-l0, dag-l1, metagraph-l0, currency-l1, data-l1)
# @option -n                  Retroactive rows from logs file (default 10)
function logs() {
  build_paths
  check_if_should_run_update

  ensure_permissions_on_files_and_directories
  load_scripts

  logs_containers

  exit 0
}

# @cmd Download the metagraph-monitoring-service (https://github.com/Constellation-Labs/metagraph-monitoring-service)
# @alias install_monitoring_service
function install-monitoring-service() {
  build_paths
  check_if_should_run_update

  load_scripts
  ensure_permissions_on_files_and_directories

  install_monitoring_service

  exit 0
}

# @cmd Deploy the metagraph-monitoring-service to remote host
# @alias remote_deploy_monitoring_service
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/remote/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_DEPLOY_PLAYBOOK_FILE: infra/ansible/remote/monitoring/playbooks/deploy/deploy.ansible.yml
function remote-deploy-monitoring-service() {
  build_paths
  check_if_should_run_update

  load_scripts
  ensure_permissions_on_files_and_directories

  remote_deploy_monitoring_service

  exit 0
}

# @cmd Start the metagraph-monitoring-service on remote host
# @alias remote_start_monitoring_service
# -> DEFAULT_ANSIBLE_HOSTS_FILE: infra/ansible/remote/hosts.ansible.yml
# -> DEFAULT_ANSIBLE_START_PLAYBOOK_FILE: infra/ansible/remote/monitoring/playbooks/start/start.ansible.yml
# @flag   --force_restart                      Force metagraph restart
function remote-start-monitoring-service() {
  build_paths
  check_if_should_run_update

  load_scripts
  ensure_permissions_on_files_and_directories

  remote_start_monitoring_service

  exit 0
}

# The functions below are made for backward compatibility, they will be moved to scripts/hydra-operations/update in the next releases
function check_if_should_run_update() {
  ensure_permissions_on_files_and_directories
  DIRECTORY="$SCRIPTS_PATH/hydra-operations"

  if [ ! -d "$DIRECTORY" ]; then
    echo "$(tput setaf 1) Updates have been migrated to hydra update. Please run hydra update before continuing"
    exit 1
  fi

  local euclid_version_field=$(jq -r '.version // empty' "$ROOT_PATH/euclid.json")
  if [ -z "$euclid_version_field" ]; then
    echo "$(tput setaf 3) Could not find the version field on euclid.json file, the file is probably outdated. Running migrations..."
    load_scripts
    run_migrations
  fi

  local monitoring=$(jq -r '.deploy.ansible.monitoring // empty' "$ROOT_PATH/euclid.json")
  if [ -z "$monitoring" ]; then
    echo "$(tput setaf 3) Could not find the deploy.monitoring field on euclid.json file, the file is probably outdated. Running migrations..."
    load_scripts
    run_migrations
  fi

  local snapshot_fees=$(jq -r '.snapshot_fees // empty' "$ROOT_PATH/euclid.json")
  if [ -z "$snapshot_fees" ]; then
    echo "$(tput setaf 3) Could not find the snapshot_fees field on euclid.json file, the file is probably outdated. Running migrations..."
    load_scripts
    run_migrations
  fi

  local ref_type=$(jq -r '.ref_type // empty' "$ROOT_PATH/euclid.json")
  if [ -z "$ref_type" ]; then
    echo "$(tput setaf 3) Could not find the ref_type field on euclid.json file, the file is probably outdated. Running migrations..."
    load_scripts
    run_migrations
  fi
}

eval "$(argc --argc-eval "$0" "$@")"
