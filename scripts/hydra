check_if_docker_is_running() {
  if ! docker info &>/dev/null; then
    echo "You need to execute Docker service first to run the script."
    exit
  fi
}

check_if_github_token_is_valid() {
  if curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user | grep -q "Bad credentials"; then
    echo "Invalid GITHUB_TOKEN"
    exit
  fi
}

run_container() {
  cd $1 || exit
  echo "Starting $1 image ..."
  docker compile up -d
  echo "$1 image started"

  if [[ ! -z "$2" ]]; then
    for ((i = 1; i <= 11; i++)); do
      if ! curl $2 &>/dev/null; then
        if [ $i -eq 10 ]; then
          echo "Could not find the $1 instance, make sure to run the $1 container"
          exit
        fi
        echo "$1 still booting... waiting 30s ($i/10)"
        sleep 30
      fi
    done
  fi
}

checkout_tessellation_version() {
  cd $2/
  echo "Checking version $1"
  if [ ! -z "$(git ls-remote origin $1)" ]; then
    git pull &>/dev/null
    git checkout $1 &>/dev/null
    echo "Valid version"
    cd ../
  else
    echo "Invalid version"
    exit
  fi
}

clone_and_check_repo_version() {
  cd ../../source/$1

  echo "Cloning repository to local codebase $1 ..."
  git clone $2
  checkout_tessellation_version $DEFAULT_TESSELLATION_PROJECT_VERSION $3

  if [ ! -z "$4" ]; then
    checkout_tessellation_version $4 $3
  fi

  cd ../../infra/docker
}

create_template() {
  cd source/$1
  if [ -d "$2" ]; then
    echo "Template already exists!"
  else
    echo "Generating template $1 ..."
    echo "Tessellation version: $DEFAULT_TESSELLATION_PROJECT_VERSION"
    g8 Constellation-Labs/currency --tag $DEFAULT_TESSELLATION_PROJECT_VERSION --name="$2" --tessellation_version="$DEFAULT_TESSELLATION_PROJECT_VERSION_TEMPLATE"

  fi
  cd ../../
}

create_docker_custom_network() {
  echo
  echo "Creating docker custom-network..."
  if ! docker network inspect custom-network &>/dev/null; then
    docker network create --driver=bridge --subnet=172.50.0.0/24 custom-network
  fi
  echo "Network created"
}

destroy_container() {
  echo "Destroying $1 container"
  cd infra/docker/$1 || exit
  docker compile down --remove-orphans
  cd ../../../
  echo "$1 container destroyed"
}

stop_container() {
  echo "Stopping $1 container"
  cd infra/docker/$1 || exit
  docker compile stop
  cd ../../../
  echo "$1 container stopped"
}

join_l1_currency_nodes() {
  echo "Joining currency l1 containers to build the cluster ..."
  for ((i = 1; i <= 11; i++)); do
    if curl -v http://localhost:9200/cluster/info &>/dev/null && curl -v http://localhost:9300/metrics &>/dev/null && curl -v http://localhost:9400/metrics &>/dev/null; then
      echo "Joining node 2 ..."
      docker exec -it l1-currency-2 bash -c "cd genesis/ && \
                                                 export CL_KEYSTORE=\${CL_KEYSTORE_GENESIS} && \
                                                 export CL_KEYALIAS=\${CL_KEYALIAS_GENESIS} && \
                                                 export CL_PASSWORD=\${CL_PASSWORD_GENESIS} && \
                                                 export GENESIS_ID=\$(java -jar cl-wallet.jar show-id) && \
                                                 curl -v -X POST http://localhost:9002/cluster/join -H \"Content-type: application/json\" -d '{ \"id\":\"'\${GENESIS_ID}'\", \"ip\": \"172.50.0.4\", \"p2pPort\": 9001 }' &> /dev/null"
      echo "Joined"
      echo "Joining node 3 ..."
      docker exec -it l1-currency-3 bash -c "cd genesis/ && \
                                                 export CL_KEYSTORE=\${CL_KEYSTORE_GENESIS} && \
                                                 export CL_KEYALIAS=\${CL_KEYALIAS_GENESIS} && \
                                                 export CL_PASSWORD=\${CL_PASSWORD_GENESIS} && \
                                                 export GENESIS_ID=\$(java -jar cl-wallet.jar show-id) && \
                                                 curl -v -X POST http://localhost:9002/cluster/join -H \"Content-type: application/json\" -d '{ \"id\":\"'\${GENESIS_ID}'\", \"ip\": \"172.50.0.4\", \"p2pPort\": 9001 }' &> /dev/null"

      echo "Joined"

      echo "Currency L1 cluster built successfully"
      break
    else
      echo "Currency L1 validators still booting... waiting 30s ($i/10)"
      sleep 30
    fi
  done
}

join_l1_global_nodes() {
  echo "Joining DAG l1 containers to build the cluster ..."
  for ((i = 1; i <= 11; i++)); do
    if curl -v http://localhost:9500/cluster/info &>/dev/null && curl -v http://localhost:9600/metrics &>/dev/null && curl -v http://localhost:9700/metrics &>/dev/null; then
      echo "Joining node 2 ..."
      docker exec -it l1-dag-2 bash -c "cd genesis/ && \
                                                            export CL_KEYSTORE=\${CL_KEYSTORE_GENESIS} && \
                                                            export CL_KEYALIAS=\${CL_KEYALIAS_GENESIS} && \
                                                            export CL_PASSWORD=\${CL_PASSWORD_GENESIS} && \
                                                            export GENESIS_ID=\$(java -jar cl-wallet.jar show-id) && \
                                                            curl -v -X POST http://localhost:9002/cluster/join -H \"Content-type: application/json\" -d '{ \"id\":\"'\${GENESIS_ID}'\", \"ip\": \"172.50.0.9\", \"p2pPort\": 9001 }' &> /dev/null"
      echo "Joined"

      echo "Joining node 3 ..."
      docker exec -it l1-dag-3 bash -c "cd genesis/ && \
                                                 export CL_KEYSTORE=\${CL_KEYSTORE_GENESIS} && \
                                                 export CL_KEYALIAS=\${CL_KEYALIAS_GENESIS} && \
                                                 export CL_PASSWORD=\${CL_PASSWORD_GENESIS} && \
                                                 export GENESIS_ID=\$(java -jar cl-wallet.jar show-id) && \
                                                 curl -v -X POST http://localhost:9002/cluster/join -H \"Content-type: application/json\" -d '{ \"id\":\"'\${GENESIS_ID}'\", \"ip\": \"172.50.0.9\", \"p2pPort\": 9001 }' &> /dev/null"

      echo "Joined"
      echo "DAG L1 cluster built successfully"
      break
    else
      echo "DAG L1 validators still booting... waiting 30s ($i/10)"
      sleep 30
    fi
  done
}

check_if_project_name_is_set() {
  if [[ -z "$PROJECT_NAME" ]]; then
    echo "You should provide the PROJECT_NAME on .env file"
    exit
  fi
}

check_if_project_directory_exists() {
  cd source/
  if [ ! -d "project/$PROJECT_NAME" ]; then
    echo "You must install a framework before building. Run hydra install first"
    exit
  fi
  cd ..
}
# @cmd Installs a local framework and detaches project
install() {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR

  if [ -d "scripts" ]; then
    cd scripts/
  fi

  source ../.env

  cd ../

  check_if_project_name_is_set

  echo "Installing hydra ..."
  echo "Installing Framework..."
  create_template project $PROJECT_NAME

  chmod -R +w .git
  rm -r .git
  echo "Hydra requires write access to the infra directory. Run: 'chmod -R a+rwx infra' before continuing."
  echo "Installed"
}

# @cmd Build containers
# @flag   --no_cache                      Build docker containers with no cache
# @flag   --run                           Run containers after build
# @flag   --include_dag_l1                Includes the dag l1 layer to build/run
# @flag   --rebuild_tessellation          Rebuild the tessellation project
# @option --only                          Build specific layer. Options: global-l0, dag-l1, currency-l0, currency-l1, monitoring
# @option --tessellation_version          Tessellation repo branch to build the JARS. Default main
build() {
  OUTPUT_YELLOW=$(tput setaf 3)
  OUTPUT_WHITE=$(tput setaf 7)
  check_if_docker_is_running

  BASEDIR=$(dirname "$0")
  VALID_ONLY_OPTIONS="global-l0 dag-l1 currency-l0 currency-l1 monitoring"

  cd $BASEDIR
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  source ../.env

  if [[ "$argc_only" != "monitoring" ]]; then
    check_if_github_token_is_valid
  fi

  if [[ -z "$GITHUB_TOKEN" && "$argc_only" != "monitoring" ]]; then
    echo "You should provide the GITHUB_TOKEN on .env file"
    exit
  fi

  if [[ -z "$argc_only" || "$argc_only" != "monitoring" ]]; then
    echo
    echo "P12 files should be inserted on source/p12-files directory"
    if [ ! -f "../source/p12-files/$P12_GENESIS_FILE_NAME" ]; then
      echo "File does not exists"
      exit
    fi

    if [[ -z "$argc_only" || "$argc_only" == "dag-l1" || "$argc_only" == "currency-l1" || ! -z "$argc_include_dag_l1" ]]; then
      if [ ! -f "../source/p12-files/$P12_NODE_2_FILE_NAME" ]; then
        echo "File does not exists"
        exit
      fi

      if [ ! -f "../source/p12-files/$P12_NODE_3_FILE_NAME" ]; then
        echo "File does not exists"
        exit
      fi
    fi
  fi

  global_l0_url=""
  dag_l1_1_url=""
  dag_l1_2_url=""
  dag_l1_3_url=""
  currency_l0_url=""
  currency_l1_1_url=""
  currency_l1_2_url=""
  currency_l1_3_url=""
  grafana_url=""

  if [ ! -z "$argc_only" ]; then
    if [[ ! $VALID_ONLY_OPTIONS =~ (^|[[:space:]])$argc_only($|[[:space:]]) ]]; then
      echo "You should provide a valid only option"
      exit
    fi
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" || "$argc_only" == "currency-l1" ]]; then
    check_if_project_name_is_set
    cd ..
    check_if_project_directory_exists
    cd scripts
  fi

  create_docker_custom_network

  cd ../infra/docker

  TESSELLATION_VERSION=$DEFAULT_TESSELLATION_PROJECT_VERSION

  if [[ -z "$(docker images -q ubuntu-with-java-and-sbt)" || ! -z "$argc_rebuild_tessellation" ]]; then
    echo "Building ubuntu shared image..."
    cd ubuntu-with-java-and-sbt || exit
    docker compile build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION
    cd ../
    echo "Ubuntu image built"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=true

    cd global-l0 || exit
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building Global L0 image... (NO CACHE)"
      docker compile build --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_KEY_ALIAS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD=$P12_GENESIS_FILE_PASSWORD --no-cache
    else
      echo "Building Global L0 image... (USING CACHE)"
      docker compile build --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_KEY_ALIAS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD=$P12_GENESIS_FILE_PASSWORD --no-cache
    fi
    echo "Global L0 image built"

    if [ ! -z "$argc_run" ]; then
      cd ../
      run_container global-l0 http://localhost:9000/metrics
      global_l0_url="$OUTPUT_YELLOW Global L0: $OUTPUT_WHITE http://localhost:9000/cluster/info"
    fi
    cd ../
  fi

  if [[ ! -z "$argc_include_dag_l1" || "$argc_only" == "dag-l1" ]]; then
    cd dag-l1 || exit
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building DAG L1 image... (NO CACHE)"
      docker compile build --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD --no-cache
    else
      echo "Building DAG L1 image... (USING CACHE)"
      docker compile build --build-arg TESSELLATION_VERSION=$TESSELLATION_VERSION --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD
    fi
    echo "DAG L1 image built"

    if [ ! -z "$argc_run" ]; then
      cd ../
      run_container dag-l1

      join_l1_global_nodes
      dag_l1_1_url="$OUTPUT_YELLOW DAG L1 - 1: $OUTPUT_WHITE http://localhost:9500/cluster/info"
      dag_l1_2_url="$OUTPUT_YELLOW DAG L1 - 2: $OUTPUT_WHITE http://localhost:9600/cluster/info"
      dag_l1_3_url="$OUTPUT_YELLOW DAG L1 - 3: $OUTPUT_WHITE http://localhost:9700/cluster/info"
    fi
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=true

    cd currency-l0 || exit
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building Currency L0 image... (NO CACHE)"
      docker compile build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_KEY_ALIAS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD=$P12_GENESIS_FILE_PASSWORD --no-cache
    else
      echo "Building Currency L0 image... (USING CACHE)"
      docker compile build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_KEY_ALIAS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD=$P12_GENESIS_FILE_PASSWORD --no-cache
    fi
    echo "Currency L0 image built"

    if [ ! -z "$argc_run" ]; then
      cd ../
      run_container currency-l0 http://localhost:9100/metrics

      currency_l0_url="$OUTPUT_YELLOW Currency L0: $OUTPUT_WHITE http://localhost:9100/cluster/info"
    fi
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    cd currency-l1 || exit
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building Currency L1 image... (NO CACHE)"
      docker compile build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD --no-cache
    else
      echo "Building Currency L1 image... (USING CACHE)"
      docker compile build --build-arg TEMPLATE_NAME=$PROJECT_NAME --build-arg GIT_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN --build-arg P12_FILE_NAME_GENESIS=$P12_GENESIS_FILE_NAME --build-arg P12_FILE_NAME_NODE_2=$P12_NODE_2_FILE_NAME --build-arg P12_FILE_NAME_NODE_3=$P12_NODE_3_FILE_NAME --build-arg P12_FILE_KEY_ALIAS_GENESIS=$P12_GENESIS_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_2=$P12_NODE_2_FILE_KEY_ALIAS --build-arg P12_FILE_KEY_ALIAS_NODE_3=$P12_NODE_3_FILE_KEY_ALIAS --build-arg P12_FILE_PASSWORD_GENESIS=$P12_GENESIS_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_2=$P12_NODE_2_FILE_PASSWORD --build-arg P12_FILE_PASSWORD_NODE_3=$P12_NODE_3_FILE_PASSWORD
    fi
    echo "Currency L1 image built"

    if [ ! -z "$argc_run" ]; then
      cd ../
      run_container currency-l1
      join_l1_currency_nodes

      currency_l1_1_url="$OUTPUT_YELLOW Currency L1 - 1: $OUTPUT_WHITE http://localhost:9200/cluster/info"
      currency_l1_2_url="$OUTPUT_YELLOW Currency L1 - 2: $OUTPUT_WHITE http://localhost:9300/cluster/info"
      currency_l1_3_url="$OUTPUT_YELLOW Currency L1 - 3: $OUTPUT_WHITE http://localhost:9400/cluster/info"
    fi
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "monitoring" ]]; then
    cd monitoring || exit
    if [ ! -z "$argc_no_cache" ]; then
      echo "Building monitoring image... (NO CACHE)"
      docker compile build --no-cache
    else
      echo "Building monitoring image... (USING CACHE)"
      docker compile build
    fi
    echo "monitoring image built"

    if [ ! -z "$argc_run" ]; then
      cd ../
      run_container monitoring

      grafana_url="$OUTPUT_YELLOW Grafana: $OUTPUT_WHITE http://localhost:3000/"
    fi
    cd ../
  fi

  if [ ! -z "$argc_run" ]; then
    echo
    echo
    echo "Containers successfully built."
    echo "Urls:"
    echo
    echo "$global_l0_url"
    echo "$currency_l0_url"
    echo "$currency_l1_1_url"
    echo "$currency_l1_2_url"
    echo "$currency_l1_3_url"
    echo "$grafana_url"
    echo "$dag_l1_1_url"
    echo "$dag_l1_2_url"
    echo "$dag_l1_3_url"
  fi

  echo "Cleaning up dangling docker images"
  docker rmi $(docker images -f "dangling=true" -q) &>/dev/null
}

# @cmd Start containers
# @flag   --include_dag_l1           Includes the dag l1 layer to build/run
# @option --only                     Build specific layer. Options: global-l0, dag-l1, currency-l0, currency-l1, monitoring
start_genesis() {
  OUTPUT_YELLOW=$(tput setaf 3)
  OUTPUT_WHITE=$(tput setaf 7)

  check_if_docker_is_running
  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    if ! docker inspect --type=image global-l0 &>/dev/null; then
      echo "You need to build the Global L0 first"
      exit
    fi
  fi
  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    if ! docker inspect --type=image currency-l0 &>/dev/null; then
      echo "You need to build the Currency L0 first"
      exit
    fi
  fi
  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    if ! docker inspect --type=image currency-l1-initial-validator &>/dev/null; then
      echo "You need to build the Currency L1 first"
      exit
    fi
  fi

  if [[ ! -z "$argc_include_dag_l1" || "$argc_only" == "dag-l1" ]]; then
    if ! docker inspect --type=image dag-l1-initial-validator &>/dev/null; then
      echo "You need to build the DAG L1 first"
      exit
    fi
  fi

  VALID_ONLY_OPTIONS="global-l0 dag-l1 currency-l0 currency-l1 monitoring"
  BASEDIR=$(dirname "$0")
  cd $BASEDIR
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  global_l0_url=""
  dag_l1_1_url=""
  dag_l1_2_url=""
  dag_l1_3_url=""
  currency_l0_url=""
  currency_l1_1_url=""
  currency_l1_2_url=""
  currency_l1_3_url=""
  grafana_url=""

  if [ ! -z "$argc_only" ]; then
    if [[ ! $VALID_ONLY_OPTIONS =~ (^|[[:space:]])$argc_only($|[[:space:]]) ]]; then
      echo "You should provide a valid only option"
      exit
    fi
  fi

  create_docker_custom_network

  cd ../infra/docker
  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=true

    run_container global-l0 http://localhost:9000/metrics
    global_l0_url="$OUTPUT_YELLOW Global L0: $OUTPUT_WHITE http://localhost:9000/cluster/info"
    cd ../
  fi

  if [[ ! -z "$argc_include_dag_l1" || "$argc_only" == "dag-l1" ]]; then
    run_container dag-l1 http://localhost:9000/metrics
    join_l1_global_nodes

    dag_l1_1_url="$OUTPUT_YELLOW DAG L1 - 1: $OUTPUT_WHITE http://localhost:9500/cluster/info"
    dag_l1_2_url="$OUTPUT_YELLOW DAG L1 - 2: $OUTPUT_WHITE http://localhost:9600/cluster/info"
    dag_l1_3_url="$OUTPUT_YELLOW DAG L1 - 3: $OUTPUT_WHITE http://localhost:9700/cluster/info"
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=true

    run_container currency-l0 http://localhost:9100/metrics
    currency_l0_url="$OUTPUT_YELLOW Currency L0: $OUTPUT_WHITE http://localhost:9100/cluster/info"
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    run_container currency-l1
    join_l1_currency_nodes

    currency_l1_1_url="$OUTPUT_YELLOW Currency L1 - 1: $OUTPUT_WHITE http://localhost:9200/cluster/info"
    currency_l1_2_url="$OUTPUT_YELLOW Currency L1 - 2: $OUTPUT_WHITE http://localhost:9300/cluster/info"
    currency_l1_3_url="$OUTPUT_YELLOW Currency L1 - 3: $OUTPUT_WHITE http://localhost:9400/cluster/info"
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "monitoring" ]]; then
    run_container monitoring

    grafana_url="$OUTPUT_YELLOW Grafana: $OUTPUT_WHITE http://localhost:3000/"
  fi

  echo
  echo
  echo "Containers successfully built."
  echo "Urls:"
  echo
  echo "$global_l0_url"
  echo "$currency_l0_url"
  echo "$currency_l1_1_url"
  echo "$currency_l1_2_url"
  echo "$currency_l1_3_url"
  echo "$grafana_url"
  echo "$dag_l1_1_url"
  echo "$dag_l1_2_url"
  echo "$dag_l1_3_url"
}

# @cmd Stop containers
# @option --only                     Build specific layer. Options: global-l0, dag-l1, currency-l0, currency-l1, monitoring
stop() {
  check_if_docker_is_running
  BASEDIR=$(dirname "$0")
  cd $BASEDIR || exit
  if [ -d "scripts" ]; then
    cd scripts/
  fi
  cd ..
  chmod -R +w source

  echo "Starting stopping containers ..."

  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    stop_container currency-l1
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=true
    stop_container currency-l0
  fi

  if [[ -z "$argc_only" || "$argc_only" == "dag-l1" ]]; then
    stop_container dag-l1
  fi

  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=true
    stop_container global-l0
  fi

  if [[ -z "$argc_only" || "$argc_only" == "monitoring" ]]; then
    stop_container monitoring
  fi
}

# @cmd Destroy containers
# @flag   --delete_project            Delete custom project
# @option --only                     Build specific layer. Options: global-l0, dag-l1, currency-l0, currency-l1, monitoring
destroy() {
  check_if_docker_is_running
  BASEDIR=$(dirname "$0")
  cd $BASEDIR || exit
  if [ -d "scripts" ]; then
    cd scripts/
  fi

  source ../.env
  cd ..
  chmod -R +w source

  echo "Starting destroying containers ..."

  if [[ ! -z "$argc_delete_project" ]]; then
    echo "Removing the project codebase at $1..."
    rm -r source/project/$PROJECT_NAME
    echo "Removed!"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    destroy_container currency-l1
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=true
    destroy_container currency-l0
  fi

  if [[ -z "$argc_only" || "$argc_only" == "dag-l1" ]]; then
    destroy_container dag-l1
  fi

  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    export SHOULD_RESET_GENESIS_FILE=true
    destroy_container global-l0
  fi

  if [[ -z "$argc_only" || "$argc_only" == "monitoring" ]]; then
    destroy_container monitoring
  fi

  destroy_container ubuntu-with-java-and-sbt

  docker network rm custom-network
  docker rmi $(docker images -f "dangling=true" -q) &>/dev/null
}

# @cmd Check the status of the containers
# @flag  --show_all    Show all containers, including the stopped
status() {
  check_if_docker_is_running
  if [[ ! -z "$argc_show_all" ]]; then
    docker ps -a --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}"
  else
    docker ps --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}"
  fi
}
eval "$(argc --argc-eval "$0" "$@")"
