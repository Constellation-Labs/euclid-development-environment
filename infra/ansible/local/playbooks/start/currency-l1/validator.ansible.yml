---
- name: (Currency L1) Copy file to Docker container
  command: docker cp {{ lookup('env', 'SOURCE_PATH') }}/p12-files/{{ validator_node_info.key_file.name  }} {{ validator_node_info.name  }}:code/currency-l1/{{ validator_node_info.key_file.name  }}

- name: (Currency L1) Set validator number
  set_fact:
    validator_number: "{{ index + 1 }}"

- name: (Currency L1) Set local variables
  set_fact:
    cl_public_http_port: "{{ (base_currency_l1_public_port | int ) + (offset * ( validator_number | int)) }}"
    cl_p2p_http_port: "{{ (base_currency_l1_p2p_port | int ) + (offset * ( validator_number | int)) }}"
    cl_cli_http_port: "{{ (base_currency_l1_cli_port | int ) + (offset * ( validator_number | int)) }}"
    node_ip: "{{ base_prefix_ip }}{{ (( validator_number | int ) + 1) * offset }}"
    lead_node_ip: "{{ base_prefix_ip }}{{ offset }}"
    lead_node_p2p_port: "{{ base_currency_l1_p2p_port | int }}"
    ml0_lead_node_public_port: "{{ base_metagraph_l0_public_port | int }}"
    gl0_lead_node_public_port: "{{ base_global_l0_public_port | int }}"

- name: (Currency L1) Get metagraph address
  shell: |
    cd metagraph-l0
    cat {{ lookup('env', 'INFRA_PATH') }}/docker/shared/genesis/genesis.address
  register: metagraph_id_raw
  
- set_fact:
    metagraph_id: "{{ metagraph_id_raw.stdout }}"

- name: (Currency L1) Start as validator
  community.docker.docker_container_exec:
    container: "{{ validator_node_info.name }}"
    env: 
      CL_PUBLIC_HTTP_PORT: "{{ cl_public_http_port }}"
      CL_P2P_HTTP_PORT: "{{ cl_p2p_http_port }}"
      CL_CLI_HTTP_PORT: "{{ cl_cli_http_port }}"
      
      CL_L0_PEER_HTTP_HOST: "{{ lead_node_ip }}"
      CL_L0_PEER_HTTP_PORT: "{{ ml0_lead_node_public_port }}"
      CL_L0_PEER_ID: "{{ lead_node_id }}"

      CL_GLOBAL_L0_PEER_HTTP_HOST: "{{ lead_node_ip }}"
      CL_GLOBAL_L0_PEER_HTTP_PORT: "{{ gl0_lead_node_public_port }}"
      CL_GLOBAL_L0_PEER_ID: "{{ lead_node_id }}"

      CL_KEYSTORE: "{{ validator_node_info.key_file.name }}"
      CL_KEYALIAS: "{{ validator_node_info.key_file.alias }}"
      CL_PASSWORD: "{{ validator_node_info.key_file.password }}"

      CL_L0_TOKEN_IDENTIFIER: "{{ metagraph_id }}"
      
      CL_APP_ENV: dev
      CL_COLLATERAL: "0"
    command: |
      bash -c '
      cd currency-l1
      nohup java -jar currency-l1.jar run-validator --ip {{ node_ip }} > currency-l1.log 2>&1 &
      '

- name: (Currency L1) Check if node is ReadyToJoin
  uri:
    url: "http://localhost:{{ cl_public_http_port }}/node/info"
    method: GET
    return_content: yes
  register: response
  until: response.status == 200 and ("ReadyToJoin" in response.content | string or retries >= 100)
  retries: 120
  delay: 1
  vars:
    retries: 0


- name: (Currency L1) Join Cluster
  community.docker.docker_container_exec:
    container: "{{ validator_node_info.name }}"
    command: >
      curl -X POST 
      -H "Content-Type: application/json" 
      -d '{"id": "{{ lead_node_id }}", "ip": "{{ lead_node_ip }}", "p2pPort": "{{ lead_node_p2p_port }}"}' 
      "http://localhost:{{ cl_cli_http_port }}/cluster/join"