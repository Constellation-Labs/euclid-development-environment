---
# Set defaults and determine execution mode
- name: Set default execution flags
  set_fact:
    force_genesis: "{{ force_genesis | default(false) | bool }}"
    force_owner_message: "{{ force_owner_message | default(false) | bool }}"
    force_staking_message: "{{ force_staking_message | default(false) | bool }}"

- name: Check for existing incremental snapshots
  stat:
    path: "/home/{{ ansible_user }}/code/metagraph-l0/data/incremental_snapshot"
  register: incremental_snapshots

- name: Determine execution mode
  set_fact:
    should_run_genesis: "{{ not incremental_snapshots.stat.exists or force_genesis }}"
    should_run_rollback: "{{ incremental_snapshots.stat.exists and not force_genesis }}"

# Validate required files exist
- name: Validate required files
  stat:
    path: "/home/{{ ansible_user }}/code/metagraph-l0/{{ item }}"
  register: file_check
  failed_when: not file_check.stat.exists
  loop:
    - "metagraph-l0.jar"
    - "{{ cl_keystore }}"
    - "{{ owner_p12_file_name | default('') }}"
    - "{{ staking_p12_file_name | default('') }}"
    - "{{ second_signer_p12_file_name_owner | default('') }}"
    - "{{ second_signer_p12_file_name_staking | default('') }}"
  when: item != ""

# Genesis preparation
- name: Prepare for genesis
  block:
    - name: Get current timestamp
      set_fact:
        current_time: "{{ ansible_date_time.iso8601_basic_short }}"

    - name: Create archived-data directory
      file:
        path: "/home/{{ ansible_user }}/code/metagraph-l0/archived-data"
        state: directory

    - name: Archive existing data directory
      shell: |
        cd "/home/{{ ansible_user }}/code/metagraph-l0"
        if [ -d "data" ]; then
          mv data "archived-data/data_{{ current_time }}"
        fi
      args:
        executable: /bin/bash
  when: should_run_genesis

# Fetch latest snapshot and calculate ordinals
- name: Fetch global snapshot data
  uri:
    url: "http://{{ gl0_ip }}:{{ gl0_port }}/global-snapshots/latest/combined"
    method: GET
    return_content: yes
    headers:
      Accept: "application/json"
  register: snapshot_response
  when: should_run_genesis or force_owner_message or force_staking_message

- name: Extract metagraph messages from snapshot
  set_fact:
    metagraph_messages: >-
      {{
        (snapshot_response.content | from_json) |
        json_query('[1].lastCurrencySnapshots.' + metagraph_id + '.Right[1].lastMessages') |
        default({})
      }}
  when: snapshot_response is defined

- name: Calculate parent ordinals
  set_fact:
    owner_parent_ordinal: >-
      {{
        (metagraph_messages.Owner.value.parentOrdinal | default(-1) | int) + 1
      }}
    staking_parent_ordinal: >-
      {{
        (metagraph_messages.Staking.value.parentOrdinal | default(-1) | int) + 1
      }}
  when: metagraph_messages is defined

# Generate signing messages
- name: Generate owner signing message
  block:
    - name: Get owner address
      shell: |
        cd "/home/{{ ansible_user }}/code/metagraph-l0"
        java -jar cl-wallet.jar show-address
      environment:
        CL_KEYSTORE: "{{ owner_p12_file_name }}"
        CL_KEYALIAS: "{{ owner_p12_alias }}"
        CL_PASSWORD: "{{ owner_p12_password }}"
      register: owner_address

    - name: Create owner message (first signer)
      shell: |
        cd "/home/{{ ansible_user }}/code/metagraph-l0"
        java -jar cl-wallet.jar create-owner-signing-message \
          --address "{{ owner_address.stdout }}" \
          --metagraphId "{{ metagraph_id }}" \
          --parentOrdinal "{{ owner_parent_ordinal | default(0) }}"
      environment:
        CL_KEYSTORE: "{{ owner_p12_file_name }}"
        CL_KEYALIAS: "{{ owner_p12_alias }}"
        CL_PASSWORD: "{{ owner_p12_password }}"
      register: owner_msg_first
      when: should_run_rollback and force_owner_message

    - name: Create owner message (second signer)
      shell: |
        cd "/home/{{ ansible_user }}/code/metagraph-l0"
        java -jar cl-wallet.jar create-owner-signing-message \
          --address "{{ owner_address.stdout }}" \
          --metagraphId "{{ metagraph_id }}" \
          --parentOrdinal "{{ owner_parent_ordinal | default(0) }}"
      environment:
        CL_KEYSTORE: "{{ second_signer_p12_file_name_owner }}"
        CL_KEYALIAS: "{{ second_signer_p12_alias_owner }}"
        CL_PASSWORD: "{{ second_signer_p12_password_owner }}"
      register: owner_msg_second
      when: 
        - should_run_rollback and force_owner_message
        - second_signer_p12_file_name_owner is defined and second_signer_p12_file_name_owner != ""

    - name: Combine owner message proofs
      set_fact:
        owner_message: >-
          {{
            (owner_msg_first.stdout | from_json) |
            combine({
              'proofs': (owner_msg_first.stdout | from_json).proofs +
                       ((owner_msg_second.stdout | from_json).proofs if owner_msg_second is not skipped else [])
            })
          }}
      when: should_run_rollback and force_owner_message

    - name: Create owner message for genesis (single signature to file)
      shell: |
        cd "/home/{{ ansible_user }}/code/metagraph-l0"
        java -jar cl-wallet.jar create-owner-signing-message \
          --address "{{ owner_address.stdout }}" \
          --metagraphId "{{ metagraph_id }}" \
          --parentOrdinal "{{ owner_parent_ordinal | default(0) }}" > owner-message
      environment:
        CL_KEYSTORE: "{{ cl_keystore }}"
        CL_KEYALIAS: "{{ cl_keyalias }}"
        CL_PASSWORD: "{{ cl_password }}"
      when: should_run_genesis
  when: 
    - owner_p12_file_name is defined and owner_p12_file_name != ""
    - should_run_genesis or force_owner_message

- name: Generate staking signing message
  block:
    - name: Get staking address
      shell: |
        cd "/home/{{ ansible_user }}/code/metagraph-l0"
        java -jar cl-wallet.jar show-address
      environment:
        CL_KEYSTORE: "{{ staking_p12_file_name }}"
        CL_KEYALIAS: "{{ staking_p12_alias }}"
        CL_PASSWORD: "{{ staking_p12_password }}"
      register: staking_address

    - name: Create staking message (first signer)
      shell: |
        cd "/home/{{ ansible_user }}/code/metagraph-l0"
        java -jar cl-wallet.jar create-staking-signing-message \
          --address "{{ staking_address.stdout }}" \
          --parentOrdinal "{{ staking_parent_ordinal | default(0) }}" \
          --metagraphId "{{ metagraph_id }}"
      environment:
        CL_KEYSTORE: "{{ staking_p12_file_name }}"
        CL_KEYALIAS: "{{ staking_p12_alias }}"
        CL_PASSWORD: "{{ staking_p12_password }}"
      register: staking_msg_first

    - name: Create staking message (second signer)
      shell: |
        cd "/home/{{ ansible_user }}/code/metagraph-l0"
        java -jar cl-wallet.jar create-staking-signing-message \
          --address "{{ staking_address.stdout }}" \
          --parentOrdinal "{{ staking_parent_ordinal | default(0) }}" \
          --metagraphId "{{ metagraph_id }}"
      environment:
        CL_KEYSTORE: "{{ second_signer_p12_file_name_staking }}"
        CL_KEYALIAS: "{{ second_signer_p12_alias_staking }}"
        CL_PASSWORD: "{{ second_signer_p12_password_staking }}"
      register: staking_msg_second
      when: second_signer_p12_file_name_staking is defined and second_signer_p12_file_name_staking != ""

    - name: Combine staking message proofs
      set_fact:
        staking_message: >-
          {{
            (staking_msg_first.stdout | from_json) |
            combine({
              'proofs': (staking_msg_first.stdout | from_json).proofs +
                       ((staking_msg_second.stdout | from_json).proofs if staking_msg_second is not skipped else [])
            })
          }}
  when: 
    - staking_p12_file_name is defined and staking_p12_file_name != ""
    - should_run_genesis or force_staking_message

# Start the metagraph node
- name: Start metagraph L0 node
  shell: |
    cd "/home/{{ ansible_user }}/code/metagraph-l0"
    nohup java -jar metagraph-l0.jar {{ start_command }} {{ start_args }} \
      --ip {{ ansible_host }} > metagraph-l0.log 2>&1 &
  environment: "{{ node_environment }}"
  vars:
    base_env:
      CL_PUBLIC_HTTP_PORT: "{{ base_metagraph_l0_public_port }}"
      CL_P2P_HTTP_PORT: "{{ base_metagraph_l0_p2p_port }}"
      CL_CLI_HTTP_PORT: "{{ base_metagraph_l0_cli_port }}"
      CL_GLOBAL_L0_PEER_HTTP_HOST: "{{ gl0_ip }}"
      CL_GLOBAL_L0_PEER_HTTP_PORT: "{{ gl0_port }}"
      CL_GLOBAL_L0_PEER_ID: "{{ gl0_id }}"
      CL_KEYSTORE: "{{ cl_keystore }}"
      CL_KEYALIAS: "{{ cl_keyalias }}"
      CL_PASSWORD: "{{ cl_password }}"
      CL_APP_ENV: "{{ network }}"
      CL_COLLATERAL: 0
    genesis_env:
      "{{ base_env }}"
    rollback_env:
      "{{ base_env | combine({'CL_L0_TOKEN_IDENTIFIER': metagraph_id}) }}"
    
    start_command: "{{ 'run-genesis' if should_run_genesis else 'run-rollback' }}"
    start_args: "{{ 'genesis.snapshot --metagraph-owner-message ./owner-message' if should_run_genesis else '' }}"
    node_environment: "{{ genesis_env if should_run_genesis else rollback_env }}"

# Wait for node to be online and send messages
- name: Wait for node to be online
  uri:
    url: "http://localhost:{{ base_metagraph_l0_public_port }}/node/info"
    method: GET
  register: node_status
  until: node_status.status == 200
  retries: 120
  delay: 1

- name: Wait before sending messages
  pause:
    seconds: 7
  when: 
    - owner_p12_file_name is defined and owner_p12_file_name != ""
    - should_run_genesis or force_owner_message

- name: Send staking message
  uri:
    url: "http://localhost:{{ base_metagraph_l0_public_port }}/currency/message"
    method: POST
    body: "{{ staking_message }}"
    body_format: json
    status_code: [200, 204]
  when: 
    - staking_message is defined
    - should_run_genesis or force_staking_message

- name: Send owner message for rollback
  uri:
    url: "http://localhost:{{ base_metagraph_l0_public_port }}/currency/message"
    method: POST
    body: "{{ owner_message }}"
    body_format: json
    status_code: [200, 204]
  when: 
    - owner_message is defined
    - should_run_rollback and force_owner_message

- name: Wait for node to be Ready
  uri:
    url: "http://localhost:{{ base_metagraph_l0_public_port }}/node/info"
    method: GET
  register: final_status
  until: 
    - final_status.status == 200
    - '"Ready" in final_status.content'
  retries: 120
  delay: 1